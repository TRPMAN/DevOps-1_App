apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.db.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: {{ .Values.db.name }}
spec:
  replicas: {{ .Values.db.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.db.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.db.name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: myapp-container
        image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
        imagePullPolicy: {{ .Values.db.image.pullPolicy }}
        ports:
        - name: mysql-port
          containerPort: 3306
        env: 
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: db-pass
        volumeMounts:
        - name: mysql-pvc-data
          mountPath: /var/lib/mysql
        resources:
{{ toYaml .Values.db.resources | indent 10 }}

      volumes:
      - name: mysql-pvc-data
        persistentVolumeClaim:
          claimName: mysql-pvc

      # Need to make sure that /var/lib/mysql is empty
      initContainers:
      - name: busybox
        image: "{{ .Values.db.initContainer.image }}:{{ .Values.db.initContainer.tag }}"
        args: ["rm","-rf","/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: mysql-pvc-data
          mountPath: /var/lib/mysql