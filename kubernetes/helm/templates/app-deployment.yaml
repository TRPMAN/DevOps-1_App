apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: {{ .Values.app.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  replicas: {{ .Values.app.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: application-container
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        ports:
        - name: app-port
          containerPort: 8080
        resources:
{{ toYaml .Values.app.resources | indent 10 }}
        env:
        - name: DB_HOST
          value: {{ .Values.db.service.name }}
      # This will make app container deploy after all backend come up
      initContainers:
      - name: init-mysql
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup {{ .Values.db.service.name }}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mysql; sleep 2; done"]
      - name: init-memcache
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup {{ .Values.memcache.service.name }}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for memcache; sleep 2; done"]
      - name: init-rabbitmq
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup {{ .Values.rabbitmq.service.name }}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for rabbitmq; sleep 2; done"]